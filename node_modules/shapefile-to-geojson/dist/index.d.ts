/// <reference types="node" />
declare type GeoJSON = any;
interface Configuration {
    /**
     * If property values should be trimmed.
     * @default true
     */
    "trim"?: boolean;
}
/**
 * Parses a folder path containing a `shp` & `dbf` file pair into a GeoJSON object.
 * @param folder The path to the folder containing the `shp` & `dbf` file.
 * @param configuration The configuration settings to use.
 * @returns A promise containing the GeoJSON object.
 */
export declare const parseFolder: (folder: string, configuration?: Configuration | undefined) => Promise<GeoJSON>;
/**
 * Parses `shp` & `dbf` files into a GeoJSON object.
 * @param shpFile The path to the `shp` file.
 * @param dbfFile The path to the `dbf` file.
 * @param configuration The configuration settings to use.
 * @returns A promise containing the GeoJSON object.
 */
export declare const parseFiles: (shpFile: string | Buffer, dbfFile: string | Buffer, configuration?: Configuration | undefined) => Promise<GeoJSON>;
export {};
